package com.euler.solutions;

import java.util.ArrayList;
import java.util.List;

/*
 * Even Fibonacci numbers
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
 * starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
 * the sum of the even-valued terms.
 */

public class Problem002 extends IntegerSolution {
	/*
	 * Naive recursive solution for the Fibonacci sequence (for now).
	 */
	public static Integer fibonacciNaive(int seedA, int seedB, int index) {
		if (index < 0) {
			throw new IllegalArgumentException("The index must be a non-negative integer.");
		} else if (index == 0) {
			return seedA;
		} else if (index == 1) {
			return seedB;
		} else {
			return fibonacciNaive(seedA, seedB, index - 1)
					+ fibonacciNaive(seedA, seedB, index - 2);
		}
	}

	public static List<Integer> listOfFibonacciTerms(int seedA, int seedB, int limit) {
		List<Integer> terms = new ArrayList<>();
		Integer max = Math.max(seedA, seedB);

		if (max == limit) {
			terms.add(max);
		}
		if (max < limit) {
			Integer count = 0;
			Integer current = fibonacciNaive(seedA, seedB, count);
			while (current <= limit) {
				terms.add(current);
			}
		}
		return terms;
	}

	public static Integer sumOfEvenFibonacciTerms(int seedA, int seedB, int limit) {
		List<Integer> terms = listOfFibonacciTerms(seedA, seedB, limit);
		Integer sum = terms.stream().filter(t -> t % 2 == 0).mapToInt(Integer::intValue).sum();
		return sum;
	}

	@Override
	public Integer solution() {
		return sumOfEvenFibonacciTerms(1, 2, 4000000);
	}
}